@page "/counter/{TagId}"
@attribute [Authorize]
@implements IDisposable
@using booka.counter.Data
@using booka.counter.Models


@if (TagPageModel == null)
{
    <p>lade...</p>
}
else
{
    <h1>@TagPageModel.Tag.Title</h1>
    <p>@TagPageModel.Tag.Description</p>
    <TelerikComboBox Data="@ChartSpanValues" @bind-Value="SelectedChartSpan" />
    <div class="container">
        <div class="row">
            @if (!TagPageModel.Counts.Any(c => c.UserId == User.Id))
            {
                <button type="button" @onclick="() => IncrementCount(1)" class="btn btn-sm btn-outline-secondary">Klick hier für deinen ersten Count!</button>
            }

            @foreach (var user in TagPageModel.Counts.GroupBy(c => c.UserId).OrderBy(g => g.Key != User.Id))
            {
                <booka.counter.Components.UserCard User="@Users.First(u => u.Id == user.Key)"
                                                   Tag="@TagPageModel.Tag"
                                                   Counts="@user.ToList()"
                                                   ShowIncrementButtons="@(User.Id == user.Key)"
                                                   ChartConfig="@ChartConfig" />
            }
        </div>
    </div>
}
@code {

    [Inject]
    public CountService CountService { get; set; }

    [Parameter]
    public string TagId { get; set; }

    private ChartSpan _selectedChartSpan;
    public ChartSpan SelectedChartSpan
    {
        get
        {
            return _selectedChartSpan;
        }
        set
        {
            if (value == _selectedChartSpan) return;
            _selectedChartSpan = value;
            Initialize();
        }
    }

    private List<ApplicationUser> Users { get; set; }
    private ApplicationUser User { get; set; }

    private ChartConfig ChartConfig { get; set; }

    private ChartSpan[] ChartSpanValues = new ChartSpan[]
    {
        ChartSpan.OneDay,
        ChartSpan.TwoDays,
        ChartSpan.Week,
        ChartSpan.Month,
        ChartSpan.All,
                                };

    private TagPageModel TagPageModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Initialize();
        await base.OnInitializedAsync();
    }

    protected override async void OnParametersSet()
    {
        await Initialize();
        base.OnParametersSet();
    }

    private async Task Initialize()
    {
        if (TagPageModel != null)
        {
            TagPageModel.PropertyChanged -= (a, b) => StateHasChanged();
            TagPageModel.Counts.CollectionChanged -= (a, b) => StateHasChanged();
        }

        var tagId = Guid.Parse(TagId);
        Users = await CountService.GetAllUsers();
        User = await CountService.GetUser();

        TagPageModel = await CountService.GetPageModel(tagId);
        TagPageModel.PropertyChanged += (a, b) => InvokeAsync(StateHasChanged);
        TagPageModel.Counts.CollectionChanged += (a, b) => InvokeAsync(StateHasChanged);

        var from = TagPageModel.Counts.Min(c => c.TimeStamp.Date);

        ChartConfig = new ChartConfig(SelectedChartSpan, from);

        await InvokeAsync(StateHasChanged);
    }

    private async Task IncrementCount(int inc)
    {
        await CountService.AddCount(TagPageModel.Tag, inc);
    }

    void IDisposable.Dispose()
    {
        if (TagPageModel == null)
            return;
        TagPageModel.PropertyChanged -= (a, b) => StateHasChanged();
        TagPageModel.Counts.CollectionChanged -= (a, b) => StateHasChanged();
    }


}
