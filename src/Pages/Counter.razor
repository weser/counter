@page "/counter/{TagId}"
@attribute [Authorize]
@implements IDisposable
@using booka.counter.Data
@using booka.counter.Models


@if (TagPageModel == null)
{
    <p>lade...</p>
}
else
{
    <h1>@TagPageModel.Tag.Title</h1>
    <p>@TagPageModel.Tag.Description</p>
    <div class="container">
        <div class="row">
            <div class="col-6">
                <TelerikComboBox Data="@ChartSpanValues" @bind-Value="SelectedChartSpan" OnChange="@((v) => Initialize())" />
            </div>
            <div class="col-6">
                <TelerikComboBox Data="@ChartModeValues" @bind-Value="SelectedChartMode" OnChange="@((v) => Initialize())" />
            </div>
        </div>

        <div class="row">
            <div class="col">
                <TelerikChart>
                    <ChartSeriesItems>
                        @for (var i = 0; i < ChartSeriesValues.Count; i++)
                        {
                            <ChartSeries Type="ChartSeriesType.Line" Name="@ChartSeriesLabels[i]" Data="@ChartSeriesValues[i]" />
                        }
                    </ChartSeriesItems>

                    <ChartCategoryAxes>
                        <ChartCategoryAxis Categories="@xAxisItems" />
                    </ChartCategoryAxes>
                    <ChartLegend Position="ChartLegendPosition.Right">
                    </ChartLegend>
                </TelerikChart>
            </div>
        </div>
        <div class="row">
            @if (!TagPageModel.Counts.Any(c => c.UserId == User.Id))
            {
                <button type="button" @onclick="() => IncrementCount(1)" class="btn btn-sm btn-outline-secondary">Klick hier für deinen ersten Count!</button>
            }

            @foreach (var user in TagPageModel.Counts.GroupBy(c => c.UserId).OrderBy(g => g.Key != User.Id))
            {
                <booka.counter.Components.UserCard User="@Users.First(u => u.Id == user.Key)"
                                                   Tag="@TagPageModel.Tag"
                                                   Counts="@user.ToList()"
                                                   ShowIncrementButtons="@(User.Id == user.Key)" />
            }
        </div>
    </div>
}
@code {
    public List<List<object>> ChartSeriesValues;
    public List<string> ChartSeriesLabels;
    public string[] xAxisItems = new string[] { "Q1", "Q2", "Q3", "Q4" };


    [Inject]
    public CountService CountService { get; set; }

    [Parameter]
    public string TagId { get; set; }

    public ChartSpan SelectedChartSpan { get; set; } = ChartSpan.All;
    public ChartMode SelectedChartMode { get; set; } = ChartMode.SevenDayAverage;

    private List<ApplicationUser> Users { get; set; }
    private ApplicationUser User { get; set; }

    private ChartSpan[] ChartSpanValues = new ChartSpan[]
    {
        ChartSpan.OneDay,
        ChartSpan.TwoDays,
        ChartSpan.Week,
        ChartSpan.Month,
        ChartSpan.All,
                    };
    private ChartMode[] ChartModeValues = new ChartMode[]
    {
        ChartMode.Total,
        ChartMode.SevenDayAverage,
        ChartMode.Added
                };

    private TagPageModel TagPageModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Initialize();
        await base.OnInitializedAsync();
    }

    protected override async void OnParametersSet()
    {
        await Initialize();
        base.OnParametersSet();
    }

    private async Task Initialize()
    {
        if (TagPageModel != null)
        {
            TagPageModel.PropertyChanged -= (a, b) => StateHasChanged();
            TagPageModel.Counts.CollectionChanged -= (a, b) => StateHasChanged();
        }

        var tagId = Guid.Parse(TagId);
        Users = await CountService.GetAllUsers();
        User = await CountService.GetUser();

        TagPageModel = await CountService.GetPageModel(tagId);
        TagPageModel.PropertyChanged += (a, b) => CalcAllCharts();
        TagPageModel.Counts.CollectionChanged += (a, b) => CalcAllCharts();

        CalcAllCharts();
    }

    private async Task IncrementCount(int inc)
    {
        await CountService.AddCount(TagPageModel.Tag, inc);
    }

    private async void CalcAllCharts()
    {
        var config = new ChartConfig(SelectedChartSpan, TagPageModel.Counts.Min(c => c.TimeStamp.Date));
        var xValues = new List<string>();
        for (var t = config.From; t <= config.To; t += config.Step)
            xValues.Add(t.ToString(config.XAxisFormat));
        xAxisItems = xValues.ToArray();

        ChartSeriesValues = new List<List<object>>();
        ChartSeriesLabels = new List<string>();
        foreach (var u in TagPageModel.Counts.GroupBy(c => c.UserId).OrderBy(u => u.Key != User.Id))
        {
            ChartSeriesLabels.Add(Users.First(us => us.Id == u.Key).UserName);
            ChartSeriesValues.Add(CalcChart(u.ToList(), SelectedChartMode, config));
        }

        await InvokeAsync(StateHasChanged);
    }

    private List<object> CalcChart(List<Count> counts, ChartMode mode, ChartConfig config)
    {
        var xValues = new List<string>();
        var yValues = new List<int>();
        var yValuesFinal = new List<double>();

        for (var t = config.From; t <= config.To; t += config.Step)
        {
            xValues.Add(t.ToString(config.XAxisFormat));
            var sum = counts.Where(c => c.TimeStamp >= t && c.TimeStamp < t.Add(config.Step)).Sum(c => c.Value);
            yValues.Add(sum);
        }

        for (var i = 0; i < xValues.Count; i++)
        {
            switch (mode)
            {
                case ChartMode.Added:
                    yValuesFinal.Add(yValues[i]);
                    break;
                case ChartMode.Total:
                    if (i == 0)
                        yValuesFinal.Add(yValues[i]);
                    else
                        yValuesFinal.Add(yValues[i] + yValuesFinal[i - 1]);
                    break;
                case ChartMode.SevenDayAverage:
                    var boxLeft = Math.Max(0, i - config.AvgBoxSize + 1);
                    var take = i - boxLeft + 1;
                    var sum = (double)yValues.Skip(boxLeft).Take(take).Sum();
                    yValuesFinal.Add(sum / config.AvgBoxSize);
                    break;
            }
        }

        return new List<object>(yValuesFinal.Select(y => (object)y));
    }

    void IDisposable.Dispose()
    {
        if (TagPageModel == null)
            return;
        TagPageModel.PropertyChanged -= (a, b) => StateHasChanged();
        TagPageModel.Counts.CollectionChanged -= (a, b) => StateHasChanged();
    }


}
