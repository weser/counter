@using booka.counter.Data
@using booka.counter.Models

<div class="col-md-4">
    <div class="card mb-4 shadow-sm">



        <TelerikChart width="100%">
            <ChartSeriesItems>
                <ChartSeries Type="ChartSeriesType.Line" Name="Total" Data="@series1Data" Style="ChartSeriesStyle.Smooth">
                </ChartSeries>
                <ChartSeries Type="ChartSeriesType.Line" Name="mAvg(7)" Data="@series2Data" Style="ChartSeriesStyle.Smooth">
                </ChartSeries>
            </ChartSeriesItems>

            <ChartCategoryAxes>
                <ChartCategoryAxis Categories="@xAxisItems" BaseUnitStep="4"></ChartCategoryAxis>
            </ChartCategoryAxes>

            <ChartLegend Position="ChartLegendPosition.Custom" OffsetX="24" OffsetY="10">
            </ChartLegend>
        </TelerikChart>


        @*<svg class="bd-placeholder-img card-img-top" width="100%" height="225" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid slice" focusable="false" role="img" aria-label="Placeholder: Thumbnail">
                <title>Placeholder</title>
                <rect width="100%" height="100%" fill="#55595c"></rect>
                <text x="50%" y="50%" fill="#eceeef" dy=".3em">@Counts.Sum(c => c.Value)</text>
            </svg>*@
        <div class="card-body">
            <p class="card-text">
                @User.UserName (<span>@Counts.Sum(c => c.Value)</span>)
            </p>
            <div class="d-flex justify-content-between align-items-center">
                <div class="btn-group">
                    @if (ShowIncrementButtons)
                    {
                        <button type="button" @onclick="() => IncrementCount(1)" class="btn btn-sm btn-outline-secondary">+1</button>
                        <button type="button" @onclick="() => IncrementCount(5)" class="btn btn-sm btn-outline-secondary">+5</button>
                    }
                </div>
                <small class="text-muted">@Counts.Max(c => c.TimeStamp).ToString("dd.MM.yyyy HH:mm")</small>
            </div>
        </div>
    </div>
</div>

@code {

    public List<object> series1Data;
    public List<object> series2Data;
    public string[] xAxisItems;


    [Inject]
    public CountService CountService { get; set; }

    [Parameter]
    public Tag Tag { get; set; }
    [Parameter]
    public List<Count> Counts { get; set; }
    private List<Count> _counts;
    [Parameter]
    public ApplicationUser User { get; set; }

    [Parameter]
    public bool ShowIncrementButtons { get; set; }

    [Parameter]
    public ChartConfig ChartConfig { get; set; }
    private ChartConfig _chartConfig;


    protected override async void OnParametersSet()
    {
        if (_counts?.Sum(c => c.Value) == Counts?.Sum(c => c.Value) && ChartConfig == _chartConfig) return;
        _counts = Counts;
        _chartConfig = ChartConfig;

        if (ChartConfig != null)
            InitializeSeries(ChartConfig);

        await InvokeAsync(StateHasChanged);
        base.OnParametersSet();
    }

    private async Task IncrementCount(int inc)
    {
        await CountService.AddCount(Tag, inc);
    }

    void InitializeSeries(ChartConfig config)
    {
        var xValues = new List<string>();
        var yValues = new List<int>();
        var yValuesAvg = new List<double>();
        for (var t = config.From; t <= config.To; t += config.Step)
        {
            xValues.Add(t.ToString(config.XAxisFormat));
            var sum = Counts.Where(c => c.TimeStamp >= t && c.TimeStamp < t.Add(config.Step)).Sum(c => c.Value);
            yValues.Add(sum);
        }

        for (var i = 0; i < xValues.Count; i++)
        {
            var boxLeft = Math.Max(0, i - config.AvgBoxSize + 1);
            var take = i - boxLeft + 1;
            var sum = yValues.Skip(boxLeft).Take(take).Sum();
            yValuesAvg.Add(sum);
        }

        for (var i = 1; i < xValues.Count; i++)
        {
            yValues[i] = yValues[i] + yValues[i - 1];
        }


        series1Data = new List<object>(yValues.Select(y => (object)y));
        series2Data = new List<object>(yValuesAvg.Select(y => (object)y));
        xAxisItems = xValues.ToArray();
    }



}
